default namespace = "http://www.springframework.org/schema/beans"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace xsd = "http://www.w3.org/2001/XMLSchema"

org.springframework.www.schema.beans.defaultable-boolean &= empty
org.springframework.www.schema.beans.defaultable-boolean &= empty
org.springframework.www.schema.beans.defaultable-boolean &= empty
org.springframework.www.schema.beans.defaultable-boolean &= empty
org.springframework.www.schema.beans.metaType &= empty
org.springframework.www.schema.beans.propertyType &= empty
org.springframework.www.schema.beans.metaType &= empty
org.springframework.www.schema.beans.defaultable-boolean &= empty
org.springframework.www.schema.beans.defaultable-boolean &= empty
org.springframework.www.schema.beans.defaultable-boolean &= empty
org.springframework.www.schema.beans.defaultable-boolean &= empty
org.springframework.www.schema.beans.entryType &= empty
org.springframework.www.schema.beans.defaultable-boolean &= empty
org.springframework.www.schema.beans.description &= empty
org.springframework.www.schema.beans.import &= empty
org.springframework.www.schema.beans.alias &= empty
org.springframework.www.schema.beans.bean &= empty
org.springframework.www.schema.beans.beans &= empty
org.springframework.www.schema.beans.description &= empty
org.springframework.www.schema.beans.meta &= empty
org.springframework.www.schema.beans.constructor-arg &= empty
org.springframework.www.schema.beans.property &= empty
org.springframework.www.schema.beans.qualifier &= empty
org.springframework.www.schema.beans.lookup-method &= empty
org.springframework.www.schema.beans.replaced-method &= empty
org.springframework.www.schema.beans.beanElements &= empty
org.springframework.www.schema.beans.beanAttributes &= empty
org.springframework.www.schema.beans.description &= empty
org.springframework.www.schema.beans.bean &= empty
org.springframework.www.schema.beans.ref &= empty
org.springframework.www.schema.beans.idref &= empty
org.springframework.www.schema.beans.value &= empty
org.springframework.www.schema.beans.null &= empty
org.springframework.www.schema.beans.array &= empty
org.springframework.www.schema.beans.list &= empty
org.springframework.www.schema.beans.set &= empty
org.springframework.www.schema.beans.map &= empty
org.springframework.www.schema.beans.props &= empty
org.springframework.www.schema.beans.attribute &= empty
org.springframework.www.schema.beans.arg-type &= empty
org.springframework.www.schema.beans.description &= empty
org.springframework.www.schema.beans.bean &= empty
org.springframework.www.schema.beans.ref &= empty
org.springframework.www.schema.beans.idref &= empty
org.springframework.www.schema.beans.value &= empty
org.springframework.www.schema.beans.null &= empty
org.springframework.www.schema.beans.array &= empty
org.springframework.www.schema.beans.list &= empty
org.springframework.www.schema.beans.set &= empty
org.springframework.www.schema.beans.map &= empty
org.springframework.www.schema.beans.props &= empty
org.springframework.www.schema.beans.collectionElements &= empty
org.springframework.www.schema.beans.description &= empty
org.springframework.www.schema.beans.meta &= empty
org.springframework.www.schema.beans.bean &= empty
org.springframework.www.schema.beans.ref &= empty
org.springframework.www.schema.beans.idref &= empty
org.springframework.www.schema.beans.value &= empty
org.springframework.www.schema.beans.null &= empty
org.springframework.www.schema.beans.array &= empty
org.springframework.www.schema.beans.list &= empty
org.springframework.www.schema.beans.set &= empty
org.springframework.www.schema.beans.map &= empty
org.springframework.www.schema.beans.props &= empty
org.springframework.www.schema.beans.collectionElements &= empty
org.springframework.www.schema.beans.description &= empty
org.springframework.www.schema.beans.entry &= empty
org.springframework.www.schema.beans.key &= empty
org.springframework.www.schema.beans.collectionElements &= empty
org.springframework.www.schema.beans.prop &= empty
org.springframework.www.schema.beans.identifiedType &= empty
org.springframework.www.schema.beans.listOrSetType &= empty
org.springframework.www.schema.beans.listOrSetType &= empty
org.springframework.www.schema.beans.listOrSetType &= empty
org.springframework.www.schema.beans.mapType &= empty
org.springframework.www.schema.beans.propsType &= empty
org.springframework.www.schema.beans.collectionType &= empty
org.springframework.www.schema.beans.collectionType &= empty
org.springframework.www.schema.beans.collectionType &= empty
a:documentation [
  "\x{a}" ~
  "                \x{a}" ~
  "        Spring XML Beans Schema, version 4.2\x{a}" ~
  "        Authors: Juergen Hoeller, Rob Harrop, Mark Fisher, Chris Beams\x{a}" ~
  "\x{a}" ~
  "        This defines a simple and consistent way of creating a namespace\x{a}" ~
  "        of JavaBeans objects, managed by a Spring BeanFactory, read by\x{a}" ~
  "        XmlBeanDefinitionReader (with DefaultBeanDefinitionDocumentReader).\x{a}" ~
  "\x{a}" ~
  "        This document type is used by most Spring functionality, including\x{a}" ~
  "        web application contexts, which are based on bean factories.\x{a}" ~
  "\x{a}" ~
  '        Each "bean" element in this document defines a JavaBean.\x{a}' ~
  "        Typically the bean class is specified, along with JavaBean properties\x{a}" ~
  "        and/or constructor arguments.\x{a}" ~
  "\x{a}" ~
  '        A bean instance can be a "singleton" (shared instance) or a "prototype"\x{a}' ~
  "        (independent instance). Further scopes can be provided by extended\x{a}" ~
  "        bean factories, for example in a web environment.\x{a}" ~
  "\x{a}" ~
  "        References among beans are supported, that is, setting a JavaBean property\x{a}" ~
  "        or a constructor argument to refer to another bean in the same factory\x{a}" ~
  "        (or an ancestor factory).\x{a}" ~
  "\x{a}" ~
  '        As alternative to bean references, "inner bean definitions" can be used.\x{a}' ~
  "        Singleton flags of such inner bean definitions are effectively ignored:\x{a}" ~
  "        inner beans are typically anonymous prototypes.\x{a}" ~
  "\x{a}" ~
  "        There is also support for lists, sets, maps, and java.util.Properties\x{a}" ~
  "        as bean property types or constructor argument types.\x{a}" ~
  "                \x{a}" ~
  "        "
]
# base types

## 
##                         
##         The unique identifier for a bean. The scope of the identifier
##         is the enclosing bean factory.
##                         
##                 
org.springframework.www.schema.beans.identifiedType &=
  attribute id {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        The unique identifier for a bean. A bean id may not be used more than once\x{a}" ~
         "        within the same <beans> element.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  }
# Top-level <beans> tag
start |= org.springframework.www.schema.beans.beans
org.springframework.www.schema.beans.beans &=
  
  ## 
  ##                         
  ##         Container for <bean> and other elements, typically the root element in the document.
  ##         Allows the definition of default values for all nested bean definitions. May itself
  ##         be nested for the purpose of defining a subset of beans with certain default values or
  ##         to be registered only when certain profile(s) are active. Any such nested <beans> element
  ##         must be declared as the last element in the document.
  ##                         
  ##                 
  element beans {
    org.springframework.www.schema.beans.description?,
    (org.springframework.www.schema.beans.import
     | org.springframework.www.schema.beans.alias
     | org.springframework.www.schema.beans.bean
     | element * { text }*)*,
    org.springframework.www.schema.beans.beans*,
    (attribute profile {
       xsd:string
       >> a:documentation [
            "\x{a}" ~
            "                                        \x{a}" ~
            "        The set of profiles for which this <beans> element should be parsed. Multiple profiles\x{a}" ~
            "        can be separated by spaces, commas, or semi-colons.\x{a}" ~
            "\x{a}" ~
            "        If one or more of the specified profiles are active at time of parsing, the <beans>\x{a}" ~
            "        element will be parsed, and all of its <bean> elements registered, &lt;import&gt;\x{a}" ~
            "        elements followed, etc.  If none of the specified profiles are active at time of\x{a}" ~
            "        parsing, then the entire element and its contents will be ignored.\x{a}" ~
            "\x{a}" ~
            "        If a profile is prefixed with the NOT operator '!', e.g.\x{a}" ~
            "\x{a}" ~
            '                <beans profile="p1,!p2">\x{a}' ~
            "\x{a}" ~
            '        indicates that the <beans> element should be parsed if profile "p1" is active or\x{a}' ~
            '        if profile "p2" is not active.\x{a}' ~
            "\x{a}" ~
            "        Profiles are activated in one of two ways:\x{a}" ~
            "                Programmatic:\x{a}" ~
            "                        ConfigurableEnvironment#setActiveProfiles(String...)\x{a}" ~
            "                        ConfigurableEnvironment#setDefaultProfiles(String...)\x{a}" ~
            "\x{a}" ~
            "                Properties (typically through -D system properties, environment variables, or\x{a}" ~
            "                servlet context init params):\x{a}" ~
            "                        spring.profiles.active=p1,p2\x{a}" ~
            "                        spring.profiles.default=p1,p2\x{a}" ~
            "                                        \x{a}" ~
            "                                "
          ]
     }?)
    >> a:documentation [
         "\x{a}" ~
         "            default value is : default"
       ],
    [ a:defaultValue = "default" ]
    attribute default-lazy-init {
      org.springframework.www.schema.beans.defaultable-boolean
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           "        The default 'lazy-init' value; see the documentation for the\x{a}" ~
           """        'lazy-init' attribute of the 'bean' element. The default is "default",\x{a}""" ~
           "        indicating inheritance from outer 'beans' sections in case of nesting,\x{a}" ~
           '        otherwise falling back to "false".\x{a}' ~
           "                                        \x{a}" ~
           "                                "
         ]
    }
    >> a:documentation [
         "\x{a}" ~
         "            default value is : default"
       ],
    [ a:defaultValue = "default" ]
    attribute default-merge {
      org.springframework.www.schema.beans.defaultable-boolean
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           "        The default 'merge' value; see the documentation for the 'merge'\x{a}" ~
           '        attribute of the various collection elements. The default is "default",\x{a}' ~
           "        indicating inheritance from outer 'beans' sections in case of nesting,\x{a}" ~
           '        otherwise falling back to "false".\x{a}' ~
           "                                        \x{a}" ~
           "                                "
         ]
    }
    >> a:documentation [
         "\x{a}" ~
         "            default value is : default"
       ],
    
    ## 
    ##                                         
    ##         The default 'autowire' value; see the documentation for the
    ##         'autowire' attribute of the 'bean' element. The default is "default",
    ##         indicating inheritance from outer 'beans' sections in case of nesting,
    ##         otherwise falling back to "no" (i.e. no externally driven autowiring).
    ##                                         
    ##                                 
    [ a:defaultValue = "default" ]
    attribute default-autowire {
      "default" | "no" | "byName" | "byType" | "constructor"
    },
    attribute default-autowire-candidates {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           "        A default bean name pattern for identifying autowire candidates:\x{a}" ~
           '        e.g. "*Service", "data*", "*Service*", "data*Service".\x{a}' ~
           '        Also accepts a comma-separated list of patterns: e.g. "*Service,*Dao".\x{a}' ~
           "        See the documentation for the 'autowire-candidate' attribute of the\x{a}" ~
           "        'bean' element for the semantic details of autowire candidate beans.\x{a}" ~
           "                                        \x{a}" ~
           "                                "
         ]
    },
    attribute default-init-method {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           "        The default 'init-method' value; see the documentation for the\x{a}" ~
           "        'init-method' attribute of the 'bean' element.\x{a}" ~
           "                                        \x{a}" ~
           "                                "
         ]
    },
    attribute default-destroy-method {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           "        The default 'destroy-method' value; see the documentation for the\x{a}" ~
           "        'destroy-method' attribute of the 'bean' element.\x{a}" ~
           "                                        \x{a}" ~
           "                                "
         ]
    },
    attribute * { text }
  }
start |= org.springframework.www.schema.beans.description
org.springframework.www.schema.beans.description &=
  
  ## 
  ##                         
  ##         Contains informative text describing the purpose of the enclosing element.
  ##         Used primarily for user documentation of XML bean definition documents.
  ##                         
  ##                 
  element description { (empty)* }
start |= org.springframework.www.schema.beans.import
org.springframework.www.schema.beans.import &=
  
  ## 
  ##                         
  ##         Specifies an XML bean definition resource to import.
  ##                         
  ##                 
  element import {
    xsd:string,
    attribute resource {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                                        \x{a}" ~
           "        The relative resource location of the XML (bean definition) file to import,\x{a}" ~
           '        for example "myImport.xml" or "includes/myImport.xml" or "../myImport.xml".\x{a}' ~
           "                                                        \x{a}" ~
           "                                                "
         ]
    }
  }
start |= org.springframework.www.schema.beans.alias
org.springframework.www.schema.beans.alias &=
  
  ## 
  ##                         
  ##         Defines an alias for a bean (which can reside in a different definition
  ##         resource).
  ##                         
  ##                 
  element alias {
    xsd:string,
    attribute name {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                                        \x{a}" ~
           "        The name of the bean to define an alias for.\x{a}" ~
           "                                                        \x{a}" ~
           "                                                "
         ]
    },
    attribute alias {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                                        \x{a}" ~
           "        The alias name to define for the bean.\x{a}" ~
           "                                                        \x{a}" ~
           "                                                "
         ]
    }
  }
org.springframework.www.schema.beans.beanElements &=
  org.springframework.www.schema.beans.description?,
  (org.springframework.www.schema.beans.meta
   | org.springframework.www.schema.beans.constructor-arg
   | org.springframework.www.schema.beans.property
   | org.springframework.www.schema.beans.qualifier
   | org.springframework.www.schema.beans.lookup-method
   | org.springframework.www.schema.beans.replaced-method
   | element * { text }*)*
org.springframework.www.schema.beans.beanAttributes &=
  attribute name {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        Can be used to create one or more aliases illegal in an (XML) id.\x{a}" ~
         "        Multiple aliases can be separated by any number of spaces, commas,\x{a}" ~
         "        or semi-colons (or indeed any mixture of the three).\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute class {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        The fully qualified name of the bean's class, except if it serves only\x{a}" ~
         "        as a parent definition for child bean definitions.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute parent {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        The name of the parent bean definition.\x{a}" ~
         "\x{a}" ~
         "        Will use the bean class of the parent if none is specified, but can\x{a}" ~
         "        also override it. In the latter case, the child bean class must be\x{a}" ~
         "        compatible with the parent, i.e. accept the parent's property values\x{a}" ~
         "        and constructor argument values, if any.\x{a}" ~
         "\x{a}" ~
         "        A child bean definition will inherit constructor argument values,\x{a}" ~
         "        property values and method overrides from the parent, with the option\x{a}" ~
         "        to add new values. If init method, destroy method, factory bean and/or\x{a}" ~
         "        factory method are specified, they will override the corresponding\x{a}" ~
         "        parent settings.\x{a}" ~
         "\x{a}" ~
         "        The remaining settings will always be taken from the child definition:\x{a}" ~
         "        depends on, autowire mode, scope, lazy init.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute scope {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         '        The scope of this bean: typically "singleton" (one shared instance,\x{a}' ~
         "        which will be returned by all calls to getBean with the given id), or\x{a}" ~
         '        "prototype" (independent instance resulting from each call to getBean).\x{a}' ~
         "\x{a}" ~
         "        By default, a bean will be a singleton, unless the bean has a parent\x{a}" ~
         "        bean definition in which case it will inherit the parent's scope.\x{a}" ~
         "\x{a}" ~
         "        Singletons are most commonly used, and are ideal for multi-threaded\x{a}" ~
         '        service objects. Further scopes, such as "request" or "session", might\x{a}' ~
         "        be supported by extended bean factories (e.g. in a web environment).\x{a}" ~
         "\x{a}" ~
         "        Inner bean definitions inherit the singleton status of their containing\x{a}" ~
         "        bean definition, unless explicitly specified: The inner bean will be a\x{a}" ~
         "        singleton if the containing bean is a singleton, and a prototype if\x{a}" ~
         "        the containing bean has any other scope.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute abstract {
    xsd:boolean
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         '        Is this bean "abstract", that is, not meant to be instantiated itself\x{a}' ~
         "        but rather just serving as parent for concrete child bean definitions?\x{a}" ~
         '        The default is "false". Specify "true" to tell the bean factory to not\x{a}' ~
         "        try to instantiate that particular bean in any case.\x{a}" ~
         "\x{a}" ~
         "        Note: This attribute will not be inherited by child bean definitions.\x{a}" ~
         "        Hence, it needs to be specified per abstract bean definition.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  }
  >> a:documentation [
       "\x{a}" ~
       "            default value is : default"
     ],
  [ a:defaultValue = "default" ]
  attribute lazy-init {
    org.springframework.www.schema.beans.defaultable-boolean
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         '        Indicates whether this bean is to be lazily initialized. If "false",\x{a}' ~
         "        it will be instantiated on startup by bean factories that perform eager\x{a}" ~
         '        initialization of singletons. The effective default is "false".\x{a}' ~
         "\x{a}" ~
         "        Note: This attribute will not be inherited by child bean definitions.\x{a}" ~
         "        Hence, it needs to be specified per concrete bean definition. It can be\x{a}" ~
         "        shared through the 'default-lazy-init' attribute at the 'beans' level\x{a}" ~
         "        and potentially inherited from outer 'beans' defaults in case of nested\x{a}" ~
         "        'beans' sections (e.g. with different profiles).\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  }
  >> a:documentation [
       "\x{a}" ~
       "            default value is : default"
     ],
  
  ## 
  ##                                 
  ##         Controls whether bean properties are "autowired".
  ##         This is an automagical process in which bean references don't need
  ##         to be coded explicitly in the XML bean definition file, but rather the
  ##         Spring container works out dependencies. The effective default is "no".
  ## 
  ##         There are 4 modes:
  ## 
  ##         1. "no"
  ##         The traditional Spring default. No automagical wiring. Bean references
  ##         must be defined in the XML file via the <ref/> element (or "ref"
  ##         attribute). We recommend this in most cases as it makes documentation
  ##         more explicit.
  ## 
  ##         Note that this default mode also allows for annotation-driven autowiring,
  ##         if activated. "no" refers to externally driven autowiring only, not
  ##         affecting any autowiring demands that the bean class itself expresses.
  ## 
  ##         2. "byName"
  ##         Autowiring by property name. If a bean of class Cat exposes a "dog"
  ##         property, Spring will try to set this to the value of the bean "dog"
  ##         in the current container. If there is no matching bean by name, nothing
  ##         special happens.
  ## 
  ##         3. "byType"
  ##         Autowiring if there is exactly one bean of the property type in the
  ##         container. If there is more than one, a fatal error is raised, and
  ##         you cannot use byType autowiring for that bean. If there is none,
  ##         nothing special happens.
  ## 
  ##         4. "constructor"
  ##         Analogous to "byType" for constructor arguments. If there is not exactly
  ##         one bean of the constructor argument type in the bean factory, a fatal
  ##         error is raised.
  ## 
  ##         Note that explicit dependencies, i.e. "property" and "constructor-arg"
  ##         elements, always override autowiring.
  ## 
  ##         Note: This attribute will not be inherited by child bean definitions.
  ##         Hence, it needs to be specified per concrete bean definition. It can be
  ##         shared through the 'default-autowire' attribute at the 'beans' level
  ##         and potentially inherited from outer 'beans' defaults in case of nested
  ##         'beans' sections (e.g. with different profiles).
  ##                                 
  ##                         
  [ a:defaultValue = "default" ]
  attribute autowire {
    "default" | "no" | "byName" | "byType" | "constructor"
  },
  attribute depends-on {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        The names of the beans that this bean depends on being initialized.\x{a}" ~
         "        The bean factory will guarantee that these beans get initialized\x{a}" ~
         "        before this bean.\x{a}" ~
         "\x{a}" ~
         "        Note that dependencies are normally expressed through bean properties\x{a}" ~
         "        or constructor arguments. This property should just be necessary for\x{a}" ~
         "        other kinds of dependencies like statics (*ugh*) or database preparation\x{a}" ~
         "        on startup.\x{a}" ~
         "\x{a}" ~
         "        Note: This attribute will not be inherited by child bean definitions.\x{a}" ~
         "        Hence, it needs to be specified per concrete bean definition.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  }
  >> a:documentation [
       "\x{a}" ~
       "            default value is : default"
     ],
  [ a:defaultValue = "default" ]
  attribute autowire-candidate {
    org.springframework.www.schema.beans.defaultable-boolean
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        Indicates whether or not this bean should be considered when looking\x{a}" ~
         "        for matching candidates to satisfy another bean's autowiring requirements.\x{a}" ~
         "        Note that this does not affect explicit references by name, which will get\x{a}" ~
         "        resolved even if the specified bean is not marked as an autowire candidate.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute primary {
    xsd:boolean
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        Specifies that this bean should be given preference when multiple\x{a}" ~
         "        candidates are qualified to autowire a single-valued dependency.\x{a}" ~
         "        If exactly one 'primary' bean exists among the candidates, it\x{a}" ~
         "        will be the autowired value.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute init-method {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        The name of the custom initialization method to invoke after setting\x{a}" ~
         "        bean properties. The method must have no arguments, but may throw any\x{a}" ~
         "        exception.\x{a}" ~
         "\x{a}" ~
         "        This is an alternative to implementing Spring's InitializingBean\x{a}" ~
         "        interface or marking a method with the PostConstruct annotation.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute destroy-method {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        The name of the custom destroy method to invoke on bean factory shutdown.\x{a}" ~
         "        The method must have no arguments, but may throw any exception.\x{a}" ~
         "\x{a}" ~
         "        This is an alternative to implementing Spring's DisposableBean\x{a}" ~
         "        interface or the standard Java Closeable/AutoCloseable interface,\x{a}" ~
         "        or marking a method with the PreDestroy annotation.\x{a}" ~
         "\x{a}" ~
         "        Note: Only invoked on beans whose lifecycle is under the full\x{a}" ~
         "        control of the factory - which is always the case for singletons,\x{a}" ~
         "        but not guaranteed for any other scope.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute factory-method {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        The name of a factory method to use to create this object. Use\x{a}" ~
         "        constructor-arg elements to specify arguments to the factory method,\x{a}" ~
         "        if it takes arguments. Autowiring does not apply to factory methods.\x{a}" ~
         "\x{a}" ~
         '        If the "class" attribute is present, the factory method will be a static\x{a}' ~
         '        method on the class specified by the "class" attribute on this bean\x{a}' ~
         "        definition. Often this will be the same class as that of the constructed\x{a}" ~
         "        object - for example, when the factory method is used as an alternative\x{a}" ~
         "        to a constructor. However, it may be on a different class. In that case,\x{a}" ~
         '        the created object will *not* be of the class specified in the "class"\x{a}' ~
         "        attribute. This is analogous to FactoryBean behavior.\x{a}" ~
         "\x{a}" ~
         '        If the "factory-bean" attribute is present, the "class" attribute is not\x{a}' ~
         "        used, and the factory method will be an instance method on the object\x{a}" ~
         "        returned from a getBean call with the specified bean name. The factory\x{a}" ~
         "        bean may be defined as a singleton or a prototype.\x{a}" ~
         "\x{a}" ~
         "        The factory method can have any number of arguments. Autowiring is not\x{a}" ~
         "        supported. Use indexed constructor-arg elements in conjunction with the\x{a}" ~
         "        factory-method attribute.\x{a}" ~
         "\x{a}" ~
         "        Setter Injection can be used in conjunction with a factory method.\x{a}" ~
         "        Method Injection cannot, as the factory method returns an instance,\x{a}" ~
         "        which will be used when the container creates the bean.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute factory-bean {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        Alternative to class attribute for factory-method usage.\x{a}" ~
         "        If this is specified, no class attribute should be used.\x{a}" ~
         "        This must be set to the name of a bean in the current or\x{a}" ~
         "        ancestor factories that contains the relevant factory method.\x{a}" ~
         "        This allows the factory itself to be configured using Dependency\x{a}" ~
         "        Injection, and an instance (rather than static) method to be used.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute * { text }
start |= org.springframework.www.schema.beans.meta
org.springframework.www.schema.beans.meta &=
  element meta {
    org.springframework.www.schema.beans.metaType
    >> a:documentation [
         "\x{a}" ~
         "                        \x{a}" ~
         "        Arbitrary metadata attached to a bean definition.\x{a}" ~
         "                        \x{a}" ~
         "                "
       ]
  }
org.springframework.www.schema.beans.metaType &=
  attribute key {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        The key name of the metadata attribute being defined.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute value {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        The value of the metadata attribute being defined (as a simple String).\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  }
start |= org.springframework.www.schema.beans.bean
org.springframework.www.schema.beans.bean &=
  
  ## 
  ##                         
  ##         Defines a single (usually named) bean.
  ## 
  ##         A bean definition may contain nested tags for constructor arguments,
  ##         property values, lookup methods, and replaced methods. Mixing constructor
  ##         injection and setter injection on the same bean is explicitly supported.
  ##                         
  ##                 
  element bean {
    org.springframework.www.schema.beans.identifiedType,
    org.springframework.www.schema.beans.beanElements,
    org.springframework.www.schema.beans.beanAttributes
  }
start |= org.springframework.www.schema.beans.constructor-arg
org.springframework.www.schema.beans.constructor-arg &=
  
  ## 
  ##                         
  ##                                 
  ##         Bean definitions can specify zero or more constructor arguments.
  ##         This is an alternative to "autowire constructor".
  ##         Arguments correspond to either a specific index of the constructor
  ##         argument list or are supposed to be matched generically by type.
  ## 
  ##         Note: A single generic argument value will just be used once, rather
  ##         than potentially matched multiple times (as of Spring 1.1).
  ## 
  ##         constructor-arg elements are also used in conjunction with the
  ##         factory-method element to construct beans using static or instance
  ##         factory methods.
  ##                         
  ##                 
  element constructor-arg {
    org.springframework.www.schema.beans.description?,
    (org.springframework.www.schema.beans.bean
     | org.springframework.www.schema.beans.ref
     | org.springframework.www.schema.beans.idref
     | org.springframework.www.schema.beans.value
     | org.springframework.www.schema.beans.null
     | org.springframework.www.schema.beans.array
     | org.springframework.www.schema.beans.list
     | org.springframework.www.schema.beans.set
     | org.springframework.www.schema.beans.map
     | org.springframework.www.schema.beans.props
     | element * { text })?,
    attribute index {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           "        The exact index of the argument in the constructor argument list.\x{a}" ~
           "        Only needed to avoid ambiguities, e.g. in case of 2 arguments of\x{a}" ~
           "        the exact same type.\x{a}" ~
           "                                        \x{a}" ~
           "                                "
         ]
    },
    attribute type {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           "        The exact type of the constructor argument. Only needed to avoid\x{a}" ~
           "        ambiguities, e.g. in case of 2 single argument constructors\x{a}" ~
           "        that can both be converted from a String.\x{a}" ~
           "                                        \x{a}" ~
           "                                "
         ]
    },
    attribute name {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           "        The exact name of the argument in the constructor argument list.\x{a}" ~
           "        Only needed to avoid ambiguities, e.g. in case of 2 arguments of\x{a}" ~
           "        the exact same type. Note: This requires debug symbols to be\x{a}" ~
           "        stored in the class file in order to introspect argument names!\x{a}" ~
           "                                        \x{a}" ~
           "                                "
         ]
    },
    attribute ref {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           """        A short-cut alternative to a nested "<ref bean='...'/>" element.\x{a}""" ~
           "                                        \x{a}" ~
           "                                "
         ]
    },
    attribute value {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           '        A short-cut alternative to a nested "<value>...<value/>" element.\x{a}' ~
           "                                        \x{a}" ~
           "                                "
         ]
    }
  }
start |= org.springframework.www.schema.beans.property
org.springframework.www.schema.beans.property &=
  element property {
    org.springframework.www.schema.beans.propertyType
    >> a:documentation [
         "\x{a}" ~
         "                        \x{a}" ~
         "        Bean definitions can have zero or more properties.\x{a}" ~
         "        Property elements correspond to JavaBean setter methods exposed\x{a}" ~
         "        by the bean classes. Spring supports primitives, references to other\x{a}" ~
         "        beans in the same or related factories, lists, maps and properties.\x{a}" ~
         "                        \x{a}" ~
         "                "
       ]
  }
start |= org.springframework.www.schema.beans.qualifier
org.springframework.www.schema.beans.qualifier &=
  
  ## 
  ##                         
  ##         Bean definitions can provide qualifiers to match against annotations
  ##         on a field or parameter for fine-grained autowire candidate resolution.
  ##                         
  ##                 
  element qualifier {
    (org.springframework.www.schema.beans.attribute*)
    >> a:documentation [
         "\x{a}" ~
         "            default value is : org.springframework.beans.factory.annotation.Qualifier"
       ],
    [
      a:defaultValue =
        "org.springframework.beans.factory.annotation.Qualifier"
    ]
    attribute type { xsd:string },
    attribute value { xsd:string }
  }
start |= org.springframework.www.schema.beans.attribute
org.springframework.www.schema.beans.attribute &=
  element attribute {
    org.springframework.www.schema.beans.metaType
    >> a:documentation [
         "\x{a}" ~
         "                        \x{a}" ~
         "        A qualifier element may contain attribute child elements as key-value\x{a}" ~
         "        pairs. These will be available for matching against attributes of a\x{a}" ~
         "        qualifier annotation on an autowired field or parameter if present.\x{a}" ~
         "                        \x{a}" ~
         "                "
       ]
  }
start |= org.springframework.www.schema.beans.lookup-method
org.springframework.www.schema.beans.lookup-method &=
  
  ## 
  ##                         
  ##         A lookup method causes the IoC container to override the given method
  ##         and return the bean with the name given in the bean attribute. This is
  ##         a form of Method Injection. It is particularly useful as an alternative
  ##         to implementing the BeanFactoryAware interface, in order to be able to
  ##         make getBean() calls for non-singleton instances at runtime. In this
  ##         case, Method Injection is a less invasive alternative.
  ##                         
  ##                 
  element lookup-method {
    xsd:string,
    attribute name {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                                        \x{a}" ~
           "        The name of the lookup method. This method may have arguments which\x{a}" ~
           "        will be passed on to the target constructor or factory method. Note\x{a}" ~
           "        that for backwards compatibility reasons, in a scenario with overloaded\x{a}" ~
           "        non-abstract methods of the given name, only the no-arg variant of a\x{a}" ~
           "        method will be turned into a container-driven lookup method.\x{a}" ~
           "        Consider using the @Lookup annotation for more specific demarcation.\x{a}" ~
           "                                                        \x{a}" ~
           "                                                "
         ]
    },
    attribute bean {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                                        \x{a}" ~
           "        The name of the bean in the current or ancestor factories that\x{a}" ~
           "        the lookup method should resolve to. Usually this bean will be a\x{a}" ~
           "        prototype, in which case the lookup method will return a distinct\x{a}" ~
           "        instance on every invocation. If not specified, the lookup method's\x{a}" ~
           "        return type will be used for a type-based lookup.\x{a}" ~
           "                                                        \x{a}" ~
           "                                                "
         ]
    }
  }
start |= org.springframework.www.schema.beans.replaced-method
org.springframework.www.schema.beans.replaced-method &=
  
  ## 
  ##                         
  ##         Similar to the lookup method mechanism, the replaced-method element
  ##         is used to control IoC container method overriding: Method Injection.
  ##         This mechanism allows the overriding of a method with arbitrary code.
  ##                         
  ##                 
  element replaced-method {
    (org.springframework.www.schema.beans.arg-type)*,
    attribute name {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           "        The name of the method whose implementation must be replaced by the\x{a}" ~
           "        IoC container. If this method is not overloaded, there is no need\x{a}" ~
           "        to use arg-type subelements. If this method is overloaded, arg-type\x{a}" ~
           "        subelements must be used for all override definitions for the method.\x{a}" ~
           "                                        \x{a}" ~
           "                                "
         ]
    },
    attribute replacer {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           "        Bean name of an implementation of the MethodReplacer interface in the\x{a}" ~
           "        current or ancestor factories. This may be a singleton or prototype\x{a}" ~
           "        bean. If it is a prototype, a new instance will be used for each\x{a}" ~
           "        method replacement. Singleton usage is the norm.\x{a}" ~
           "                                        \x{a}" ~
           "                                "
         ]
    }
  }
start |= org.springframework.www.schema.beans.arg-type
org.springframework.www.schema.beans.arg-type &=
  
  ## 
  ##                         
  ##         Identifies an argument for a replaced method in the event of
  ##         method overloading.
  ##                         
  ##                 
  element arg-type {
    (empty)*,
    attribute match {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           "        Specification of the type of an overloaded method argument as a String.\x{a}" ~
           "        For convenience, this may be a substring of the FQN. E.g. all the\x{a}" ~
           '        following would match "java.lang.String":\x{a}' ~
           "        - java.lang.String\x{a}" ~
           "        - String\x{a}" ~
           "        - Str\x{a}" ~
           "\x{a}" ~
           "        As the number of arguments will be checked also, this convenience\x{a}" ~
           "        can often be used to save typing.\x{a}" ~
           "                                        \x{a}" ~
           "                                "
         ]
    }
  }
start |= org.springframework.www.schema.beans.ref
org.springframework.www.schema.beans.ref &=
  
  ## 
  ##                         
  ##         Defines a reference to another bean in this factory or an external
  ##         factory (parent or included factory).
  ##                         
  ##                 
  element ref {
    xsd:string,
    attribute bean {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                                        \x{a}" ~
           "        The name of the referenced bean.\x{a}" ~
           "                                                        \x{a}" ~
           "                                                "
         ]
    },
    attribute parent {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                                        \x{a}" ~
           "        The name of the referenced bean in a parent factory.\x{a}" ~
           "                                                \x{a}" ~
           "                                                "
         ]
    }
  }
start |= org.springframework.www.schema.beans.idref
org.springframework.www.schema.beans.idref &=
  
  ## 
  ##                         
  ##         The id of another bean in this factory or an external factory
  ##         (parent or included factory).
  ##         While a regular 'value' element could instead be used for the
  ##         same effect, using idref indicates that the Spring container
  ##         should check that the value actually corresponds to a bean id.
  ##                         
  ##                 
  element idref {
    xsd:string,
    attribute bean {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                                        \x{a}" ~
           "        The name of the referenced bean.\x{a}" ~
           "                                                        \x{a}" ~
           "                                                "
         ]
    }
  }
start |= org.springframework.www.schema.beans.value
org.springframework.www.schema.beans.value &=
  
  ## 
  ##                         
  ##         Contains a string representation of a property value.
  ##         The property may be a string, or may be converted to the required
  ##         type using the JavaBeans PropertyEditor machinery. This makes it
  ##         possible for application developers to write custom PropertyEditor
  ##         implementations that can convert strings to arbitrary target objects.
  ## 
  ##         Note that this is recommended for simple objects only. Configure
  ##         more complex objects by populating JavaBean properties with
  ##         references to other beans.
  ##                         
  ##                 
  element value {
    (empty)*,
    attribute type {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           "        The exact type that the value should be converted to. Only needed\x{a}" ~
           "        if the type of the target property or constructor argument is\x{a}" ~
           "        too generic: for example, in case of a collection element.\x{a}" ~
           "                                        \x{a}" ~
           "                                "
         ]
    }
  }
start |= org.springframework.www.schema.beans.null
org.springframework.www.schema.beans.null &=
  
  ## 
  ##                         
  ##         Denotes a Java null value. Necessary because an empty "value" tag
  ##         will resolve to an empty String, which will not be resolved to a
  ##         null value unless a special PropertyEditor does so.
  ##                         
  ##                 
  element null { (empty)* }
# Collection Elements
org.springframework.www.schema.beans.collectionElements &=
  org.springframework.www.schema.beans.description?,
  (org.springframework.www.schema.beans.bean
   | org.springframework.www.schema.beans.ref
   | org.springframework.www.schema.beans.idref
   | org.springframework.www.schema.beans.value
   | org.springframework.www.schema.beans.null
   | org.springframework.www.schema.beans.array
   | org.springframework.www.schema.beans.list
   | org.springframework.www.schema.beans.set
   | org.springframework.www.schema.beans.map
   | org.springframework.www.schema.beans.props
   | element * { text }*)*
start |= org.springframework.www.schema.beans.array
org.springframework.www.schema.beans.array &=
  
  ## 
  ##                         
  ##         An array can contain multiple inner bean, ref, collection, or value elements.
  ##         This configuration element will always result in an array, even when being
  ##         defined e.g. as a value for a map with value type Object.
  ##                         
  ##                 
  element array {
    org.springframework.www.schema.beans.listOrSetType
    >> a:documentation [
         "\x{a}" ~
         "            default value is : default"
       ],
    [ a:defaultValue = "default" ]
    attribute merge {
      org.springframework.www.schema.beans.defaultable-boolean
      >> a:documentation [
           "\x{a}" ~
           "                                                        \x{a}" ~
           "        Enables/disables merging for collections when using parent/child beans.\x{a}" ~
           "                                                        \x{a}" ~
           "                                                "
         ]
    }
  }
start |= org.springframework.www.schema.beans.list
org.springframework.www.schema.beans.list &=
  
  ## 
  ##                         
  ##         A list can contain multiple inner bean, ref, collection, or value elements.
  ##         A list can also map to an array type; the necessary conversion is performed
  ##         automatically.
  ##                         
  ##                 
  element list {
    org.springframework.www.schema.beans.listOrSetType
    >> a:documentation [
         "\x{a}" ~
         "            default value is : default"
       ],
    [ a:defaultValue = "default" ]
    attribute merge {
      org.springframework.www.schema.beans.defaultable-boolean
      >> a:documentation [
           "\x{a}" ~
           "                                                        \x{a}" ~
           "        Enables/disables merging for collections when using parent/child beans.\x{a}" ~
           "                                                        \x{a}" ~
           "                                                "
         ]
    }
  }
start |= org.springframework.www.schema.beans.set
org.springframework.www.schema.beans.set &=
  
  ## 
  ##                         
  ##         A set can contain multiple inner bean, ref, collection, or value elements.
  ##                         
  ##                 
  element set {
    org.springframework.www.schema.beans.listOrSetType
    >> a:documentation [
         "\x{a}" ~
         "            default value is : default"
       ],
    [ a:defaultValue = "default" ]
    attribute merge {
      org.springframework.www.schema.beans.defaultable-boolean
      >> a:documentation [
           "\x{a}" ~
           "                                                        \x{a}" ~
           "        Enables/disables merging for collections when using parent/child beans.\x{a}" ~
           "                                                        \x{a}" ~
           "                                                "
         ]
    }
  }
start |= org.springframework.www.schema.beans.map
org.springframework.www.schema.beans.map &=
  
  ## 
  ##                         
  ##         A mapping from a key to an object. Maps may be empty.
  ##                         
  ##                 
  element map {
    org.springframework.www.schema.beans.mapType
    >> a:documentation [
         "\x{a}" ~
         "            default value is : default"
       ],
    [ a:defaultValue = "default" ]
    attribute merge {
      org.springframework.www.schema.beans.defaultable-boolean
      >> a:documentation [
           "\x{a}" ~
           "                                                        \x{a}" ~
           "        Enables/disables merging for collections when using parent/child beans.\x{a}" ~
           "                                                        \x{a}" ~
           "                                                "
         ]
    }
  }
start |= org.springframework.www.schema.beans.entry
org.springframework.www.schema.beans.entry &=
  element entry {
    org.springframework.www.schema.beans.entryType
    >> a:documentation [
         "\x{a}" ~
         "                        \x{a}" ~
         "        A map entry can be an inner bean, ref, value, or collection.\x{a}" ~
         '        The key of the entry is given by the "key" attribute or child element.\x{a}' ~
         "                        \x{a}" ~
         "                "
       ]
  }
start |= org.springframework.www.schema.beans.props
org.springframework.www.schema.beans.props &=
  
  ## 
  ##                         
  ##         Props elements differ from map elements in that values must be strings.
  ##         Props may be empty.
  ##                         
  ##                 
  element props {
    org.springframework.www.schema.beans.propsType
    >> a:documentation [
         "\x{a}" ~
         "            default value is : default"
       ],
    [ a:defaultValue = "default" ]
    attribute merge {
      org.springframework.www.schema.beans.defaultable-boolean
      >> a:documentation [
           "\x{a}" ~
           "                                                        \x{a}" ~
           "        Enables/disables merging for collections when using parent/child beans.\x{a}" ~
           "                                                        \x{a}" ~
           "                                                "
         ]
    }
  }
start |= org.springframework.www.schema.beans.key
org.springframework.www.schema.beans.key &=
  
  ## 
  ##                         
  ##         A key element can contain an inner bean, ref, value, or collection.
  ##                         
  ##                 
  element key {
    org.springframework.www.schema.beans.collectionElements
  }
start |= org.springframework.www.schema.beans.prop
org.springframework.www.schema.beans.prop &=
  
  ## 
  ##                         
  ##         The string value of the property. Note that whitespace is trimmed
  ##         off to avoid unwanted whitespace caused by typical XML formatting.
  ##                         
  ##                 
  element prop {
    (empty)*,
    attribute key {
      xsd:string
      >> a:documentation [
           "\x{a}" ~
           "                                        \x{a}" ~
           "        The key of the property entry.\x{a}" ~
           "                                        \x{a}" ~
           "                                "
         ]
    }
  }
org.springframework.www.schema.beans.propertyType &=
  org.springframework.www.schema.beans.description?,
  (org.springframework.www.schema.beans.meta
   | org.springframework.www.schema.beans.bean
   | org.springframework.www.schema.beans.ref
   | org.springframework.www.schema.beans.idref
   | org.springframework.www.schema.beans.value
   | org.springframework.www.schema.beans.null
   | org.springframework.www.schema.beans.array
   | org.springframework.www.schema.beans.list
   | org.springframework.www.schema.beans.set
   | org.springframework.www.schema.beans.map
   | org.springframework.www.schema.beans.props
   | element * { text })?,
  attribute name {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        The name of the property, following JavaBean naming conventions.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute ref {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         """        A short-cut alternative to a nested "<ref bean='...'/>".\x{a}""" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute value {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         '        A short-cut alternative to a nested "<value>...</value>" element.\x{a}' ~
         "                                \x{a}" ~
         "                        "
       ]
  }
# Collection Types

# base type for collections that have (possibly) typed nested values
org.springframework.www.schema.beans.collectionType &=
  attribute value-type {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        The default Java type for nested values. Must be a fully qualified\x{a}" ~
         "        class name.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  }
# 'list' and 'set' collection type
org.springframework.www.schema.beans.listOrSetType &=
  org.springframework.www.schema.beans.collectionType,
  org.springframework.www.schema.beans.collectionElements
# 'map' element type
org.springframework.www.schema.beans.mapType &=
  org.springframework.www.schema.beans.collectionType,
  org.springframework.www.schema.beans.description?,
  (org.springframework.www.schema.beans.entry)*,
  attribute key-type {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                                \x{a}" ~
         "        The default Java type for nested entry keys. Must be a fully qualified\x{a}" ~
         "        class name.\x{a}" ~
         "                                                \x{a}" ~
         "                                        "
       ]
  }
# 'entry' element type
org.springframework.www.schema.beans.entryType &=
  org.springframework.www.schema.beans.key?,
  org.springframework.www.schema.beans.collectionElements,
  attribute key {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        Each map element must specify its key as attribute or as child element.\x{a}" ~
         "        A key attribute is always a String value.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute key-ref {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         '        A short-cut alternative to a to a "key" element with a nested\x{a}' ~
         """        "<ref bean='...'/>".\x{a}""" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute value {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         '        A short-cut alternative to a nested "<value>...</value>"\x{a}' ~
         "        element.\x{a}" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute value-ref {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         """        A short-cut alternative to a nested "<ref bean='...'/>".\x{a}""" ~
         "                                \x{a}" ~
         "                        "
       ]
  },
  attribute value-type {
    xsd:string
    >> a:documentation [
         "\x{a}" ~
         "                                \x{a}" ~
         "        A short-cut alternative to a 'type' attribute on a nested\x{a}" ~
         """        "<value type='...' >...</value>" element.\x{a}""" ~
         "                                \x{a}" ~
         "                        "
       ]
  }
# 'props' collection type
org.springframework.www.schema.beans.propsType &=
  org.springframework.www.schema.beans.collectionType,
  (org.springframework.www.schema.beans.prop)*
# simple internal types
org.springframework.www.schema.beans.defaultable-boolean &=
  "default" | "true" | "false"
